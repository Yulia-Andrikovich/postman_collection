{
	"info": {
		"_postman_id": "99e75155-b7cd-4c3d-93eb-cb6db05c0c03",
		"name": "Star Wars Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22742529"
	},
	"item": [
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"}); \r",
							"\r",
							"//2. All declarated fields are displayed\r",
							"pm.test(\"All declarated fields are displayed\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"})    \r",
							"\r",
							"//3. Field value is not NULL\r",
							"pm.test(\"Field value is not NULL\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(\"null\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"null\");\r",
							"    pm.expect(jsonData.films).not.equal(\"null\");\r",
							"    pm.expect(jsonData.species).not.equal(\"null\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"null\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"null\");\r",
							"    \r",
							"});\r",
							"\r",
							"//4. Field is not empty\r",
							"pm.test(\"Field is not empty\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"    \r",
							"});\r",
							"\r",
							"//5. Fields correspond to the specific values\r",
							"pm.test(\"Fields correspond to the specific values\", function() {\r",
							"   var jsonData = pm.response.json(); \r",
							"\r",
							"   pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"   pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"   pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"   pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"   pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"   pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"\r",
							" });  \r",
							"\r",
							" //6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"}); \r",
							"\r",
							"//7. Status message is OK\r",
							"pm.test(\"Status message is OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"}); \r",
							"\r",
							"//8. Response time is less than 1000 ms\r",
							"pm.test(\"Response time is less than 1000 ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000)\r",
							"});    \r",
							"\r",
							"//9. There is a specific header\r",
							"pm.test(\"There is a specific header\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"});    \r",
							"\r",
							"//10. There is a specific value of the header\r",
							"pm.test(\"There is a specific value of the header\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});    \r",
							"\r",
							"//11. Cookies are displayed\r",
							"pm.test(\"Cookies are displayed\", function() {\r",
							"    pm.cookies.has(\"_gid\")\r",
							"});  \r",
							"\r",
							"//12. Cookies have specific value\r",
							"pm.test(\"Cookies have specific value\", function() {\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"_gid\");\r",
							"        console.log(\"MY_COOKIE\");\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"    }\r",
							"\r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Creation of JSON shema\r",
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"   // Specify the type of object\r",
							"    \"type\": \"object\",\r",
							"   // Specify requiremet of properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"   // Description of properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"              },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"             }, \r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"             }, \r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"             },      \r",
							"           } \r",
							"\r",
							"        };\r",
							"\r",
							"pm.test(\"Body is correct\", function() {\r",
							"     pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});       \r",
							"\r",
							"     "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Ula\"}"
				},
				"url": {
					"raw": "https://745f3af4-5dcd-49b3-ad74-8d83f51a05c7.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"745f3af4-5dcd-49b3-ad74-8d83f51a05c7",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://745f3af4-5dcd-49b3-ad74-8d83f51a05c7.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://745f3af4-5dcd-49b3-ad74-8d83f51a05c7.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"745f3af4-5dcd-49b3-ad74-8d83f51a05c7",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"status\": {\r\n        \"name\": \"Star War Mock Server\",\r\n        \"message\": \"succes\",\r\n       }\r\n}"
				},
				{
					"name": "https://745f3af4-5dcd-49b3-ad74-8d83f51a05c7.mock.pstmn.io/action",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Ula\"}"
						},
						"url": {
							"raw": "https://745f3af4-5dcd-49b3-ad74-8d83f51a05c7.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"745f3af4-5dcd-49b3-ad74-8d83f51a05c7",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"status\": {\r\n        \"name\": \"Ula\",\r\n        \"status\": \"Created\",\r\n        \"message\": \"Succes\",\r\n       }\r\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//1. Correct response format JSON",
					"pm.test(\"Correct response format JSON\", function() {",
					"    pm.response.to.have.jsonBody()",
					"});    "
				]
			}
		}
	]
}